ARG CUDA_VERSION=9.2
ARG CUDA_TYPE=devel
ARG LINUX_VERSION=centos7
FROM gpuci/miniconda-cuda:${CUDA_VERSION}-${CUDA_TYPE}-${LINUX_VERSION}

# Define arguments
ARG GCC7_DIR=/usr/local/gcc7
ARG GCC7_VERSION=gcc-7.3.0
ARG NUM_BUILD_CPUS=8
ARG SUPPORT_FILES_DIR=supportfiles
ARG CUDA_MAJORMINOR_VERSION=${CUDA_VERSION}

# Add /usr/local/cuda/* temporarily to LD_LIBRARY_PATH to support various build steps
# This will need to be removed later since it causes problems with certain runtime libs (numba.cuda)
ENV LD_LIBRARY_PATH_POSTBUILD=$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH_POSTBUILD:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs
ENV CUDA_VERSION=${CUDA_MAJORMINOR_VERSION}

#
# The support dir contains RPMs that enable additional repos needed
# for CentOS (among other things). Copy them to a temp dir and remove
# after installed.
#
COPY ${SUPPORT_FILES_DIR}/*.rpm /tmp

RUN yum install -y /tmp/*.rpm && \
    rm -rf /tmp/*.rpm && \
    yum upgrade -y && \
    yum install -y \
      bzip2 \
      curl \
      git \
      screen \
      vim \
      wget \
      which \
      clang \
      make \
      libnccl-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} \
      libnccl-devel-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} \
      libnccl-static-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} \
      gmp-devel mpfr-devel libmpc-devel file

# Build gcc 7 and set the environment to use it
# NOTE: this step requires packages gmp-devel, mpfr-devel,
# libmpc-devel, and file (see above)

# NOTE: Q: What about devtoolset-7? Will that work instead?
#       A: Not quite:
#          https://stackoverflow.com/questions/49393888/how-can-i-use-the-new-c-11-abi-with-devtoolset-7-on-centos-rhel
#          (tl;dr: devtoolset-7 does not support the new cxx11 ABI since it
#          conflicts with CentOS sys libs.)
#          Rapids will use new new ABI for its binaries, including its own
#          libstdc++, and the rest of CentOS will continue to use the
#          system default libs.

RUN mkdir -p ${GCC7_DIR} && \
    cd ${GCC7_DIR} && wget -q http://ftp.gnu.org/gnu/gcc/${GCC7_VERSION}/${GCC7_VERSION}.tar.gz && \
    cd ${GCC7_DIR} && tar zxf ${GCC7_VERSION}.tar.gz && \
    cd ${GCC7_DIR}/${GCC7_VERSION} && \
    ./configure --prefix=${GCC7_DIR} --disable-multilib && \
    make -j${NUM_BUILD_CPUS} && make install && \
    rm -r ${GCC7_DIR}/${GCC7_VERSION} ${GCC7_DIR}/${GCC7_VERSION}.tar.gz

COPY ${GCC7_DIR}} gcc7

# Update environment to use new gcc7
ENV CC=${GCC7_DIR}/bin/gcc
ENV CXX=${GCC7_DIR}/bin/g++
ENV PATH=${GCC7_DIR}/bin:$PATH
ENV CUDAHOSTCXX=${GCC7_DIR}/bin/g++

# Update the current LD_LIBRARY_PATH with the new lib64 dir for
# remaining build steps and LD_LIBRARY_PATH_POSTBUILD for runtime use
# after building the container.
ENV LD_LIBRARY_PATH=${GCC7_DIR}/lib64:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH_POSTBUILD=${GCC7_DIR}/lib64:$LD_LIBRARY_PATH_POSTBUILD

# Enables "source activate conda"
SHELL ["/bin/bash", "-c"]

# Change LD_LIBRARY_PATH to the _POSTBUILD version (plus CONDA_PREFIX)
# in order to exclude /usr/local/cuda/* since numba.cuda cannot load
# those libs
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH_POSTBUILD:$CONDA_PREFIX

ENTRYPOINT [ "/usr/bin/tini", "--" ]
CMD [ "/bin/bash" ]
